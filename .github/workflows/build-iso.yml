---
name: Build ClarityOS ISO

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ARCH: x86_64
      IMAGE_REPO: ghcr.io/clarityos
      IMAGE_NAME: current
      IMAGE_TAG: latest
      VARIANT: current

    steps:
      - uses: actions/checkout@v3

      - name: Login to GHCR (if private)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Grab major version
        id: get_version
        run: |
          FULL_VERSION=$(podman run --rm ${IMAGE_REPO}/${IMAGE_NAME}:${IMAGE_TAG} \
            cat /usr/share/clarityos/image-info.json | jq -r '.version')
          MAJOR_VERSION="${FULL_VERSION%%.*}"
          echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT

      - name: Mount BTRFS for podman storage
        id: container-storage-action
        uses: ublue-os/container-storage-action@911baca08baf30c8654933e9e9723cb399892140

        # Fallback to the remove-unwanted-software-action if github doesn't allocate enough space
        # See: https://github.com/ublue-os/container-storage-action/pull/11
        continue-on-error: true 
        with:
          target-dir: /var/lib/containers
          mount-opts: compress-force=zstd:2

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Build ISO
        uses: jasonn3/build-container-installer@main
        id: build
        with:
          arch: ${{ env.ARCH }}
          image_name: ${{ env.IMAGE_NAME }}
          image_repo: ${{ env.IMAGE_REPO }}
          image_tag: ${{ env.IMAGE_TAG }}
          version: ${{ steps.get_version.outputs.major_version }}
          variant: ${{ env.VARIANT }}
          iso_name: clarityos-${{ env.VARIANT }}-${{ steps.get_version.outputs.major_version }}.iso

      - name: Upload ISO as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.iso_name }}
          path: |
            ${{ steps.build.outputs.iso_path }}
            ${{ steps.build.outputs.iso_path }}-CHECKSUM
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
